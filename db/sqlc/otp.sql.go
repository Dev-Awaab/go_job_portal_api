// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otp.sql

package db

import (
	"context"
	"time"
)

const createOtp = `-- name: CreateOtp :one
INSERT INTO otps (code, model, model_id, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, code, model, model_id, expires_at, created_at
`

type CreateOtpParams struct {
	Code      string    `json:"code"`
	Model     string    `json:"model"`
	ModelID   string    `json:"model_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, createOtp,
		arg.Code,
		arg.Model,
		arg.ModelID,
		arg.ExpiresAt,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Model,
		&i.ModelID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredOtps = `-- name: DeleteExpiredOtps :exec
DELETE FROM otps
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredOtps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredOtps)
	return err
}

const deleteOtpByID = `-- name: DeleteOtpByID :exec
DELETE FROM otps
WHERE id = $1
`

func (q *Queries) DeleteOtpByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOtpByID, id)
	return err
}

const getOtp = `-- name: GetOtp :one
SELECT id, code, model, model_id, expires_at, created_at FROM otps
WHERE code = $1
  AND model = $2
  AND expires_at > NOW()
LIMIT 1
`

type GetOtpParams struct {
	Code  string `json:"code"`
	Model string `json:"model"`
}

func (q *Queries) GetOtp(ctx context.Context, arg GetOtpParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtp, arg.Code, arg.Model)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Model,
		&i.ModelID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOtpByCodeAndModel = `-- name: GetOtpByCodeAndModel :one
SELECT id, code, model, model_id, expires_at, created_at FROM otps
WHERE code = $1 AND model = $2 AND model_id = $3
  AND expires_at > NOW()
LIMIT 1
`

type GetOtpByCodeAndModelParams struct {
	Code    string `json:"code"`
	Model   string `json:"model"`
	ModelID string `json:"model_id"`
}

func (q *Queries) GetOtpByCodeAndModel(ctx context.Context, arg GetOtpByCodeAndModelParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtpByCodeAndModel, arg.Code, arg.Model, arg.ModelID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Model,
		&i.ModelID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOtpByID = `-- name: GetOtpByID :one
SELECT id, code, model, model_id, expires_at, created_at FROM otps
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOtpByID(ctx context.Context, id int64) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtpByID, id)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Model,
		&i.ModelID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
